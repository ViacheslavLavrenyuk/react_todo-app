{"version":3,"sources":["TodoItem.js","TodoList.js","Button/Button.js","Footer.js","App.js","index.js"],"names":["TodoItem","props","todo","onToggleComplete","onDelete","className","type","id","checked","completed","onChange","htmlFor","title","onClick","TodoList","todos","toggleAllTodo","isActiveTodos","length","key","map","classNames","Button","activeTodos","setFilter","status","active","Footer","handleClearCompleted","showActiveTodosCount","App","state","handleInputTodoChange","value","target","setState","handleAddTodo","event","preventDefault","prevState","trim","newTodo","uuid","deleteTodo","currentTodo","filter","showTodos","visibleTodos","isActiveTodo","this","onSubmit","placeholder","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.821930e1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = (props) => {\n  const {\n    todo,\n    onToggleComplete,\n    onDelete,\n  } = props;\n\n  return (\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={`todo-${todo.id}`}\n        checked={todo.completed}\n        onChange={() => onToggleComplete()}\n      />\n      <label\n        htmlFor={`todo-${todo.id}`}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={onDelete}\n      />\n    </div>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n\n  onToggleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    onToggleComplete,\n    onDelete,\n    toggleAllTodo,\n    isActiveTodos,\n  } = props;\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n      </header>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={isActiveTodos}\n          onChange={toggleAllTodo}\n        />\n\n        {\n          todos.length > 0\n            && (\n              <label htmlFor=\"toggle-all\">\n                Mark all as complete\n              </label>\n            )\n        }\n\n        <ul\n          className=\"todo-list\"\n          key={todos.id}\n        >\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames({\n                completed: todo.completed,\n              })}\n            >\n              <TodoItem\n                todo={todo}\n                onToggleComplete={\n                  () => onToggleComplete(todo.id)\n                }\n                onDelete={\n                  () => onDelete(todo)\n                }\n              />\n              <input\n                type=\"text\"\n                className=\"edit\"\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n\n  onToggleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  toggleAllTodo: PropTypes.func.isRequired,\n  isActiveTodos: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nexport const Button = (props) => {\n  const {\n    activeTodos,\n    setFilter,\n    status,\n    title,\n  } = props;\n\n  return (\n    <button\n      type=\"button\"\n      className={classNames('footer__button', {\n        active: activeTodos === status,\n      })}\n      onClick={() => setFilter(status)}\n    >\n      {title}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  activeTodos: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './Button/Button';\n\nexport const Footer = (props) => {\n  const {\n    setFilter,\n    activeTodos,\n    handleClearCompleted,\n    showActiveTodosCount,\n  } = props;\n\n  return (\n    <footer\n      className=\"footer\"\n    >\n      <span\n        className=\"todo-count\"\n      >\n        {showActiveTodosCount}\n      </span>\n\n      <ul\n        className=\"filters\"\n      >\n        <li>\n          <Button\n            setFilter={setFilter}\n            activeTodos={activeTodos}\n            status=\"all\"\n            title=\"All\"\n          />\n        </li>\n\n        <li>\n          <Button\n            setFilter={setFilter}\n            activeTodos={activeTodos}\n            status=\"active\"\n            title=\"Active\"\n          />\n        </li>\n\n        <li>\n          <Button\n            setFilter={setFilter}\n            activeTodos={activeTodos}\n            status=\"completed\"\n            title=\"Completed\"\n          />\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={handleClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  activeTodos: PropTypes.string.isRequired,\n  showActiveTodosCount: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport uuid from 'react-uuid';\nimport { TodoList } from './TodoList';\nimport { Footer } from './Footer';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    active: 'all',\n    title: '',\n  }\n\n  handleInputTodoChange = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      title: value,\n    });\n  }\n\n  handleAddTodo = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n\n    this.setState((prevState) => {\n      if (!title.trim()) {\n        return {\n          title: '',\n        };\n      }\n\n      const newTodo = {\n        id: uuid(),\n        title,\n        completed: false,\n      };\n\n      return {\n        todos: [\n          ...prevState.todos,\n          newTodo,\n        ],\n        id: '',\n        title: '',\n      };\n    });\n  }\n\n  onToggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo,\n            completed: !todo.completed,\n          }\n          : todo)),\n    }));\n  }\n\n  toggleAllTodo = (event) => {\n    const { checked } = event.target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        {\n          ...todo,\n          completed: checked,\n        }\n      )),\n    }));\n  };\n\n  deleteTodo = (currentTodo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        todo => todo.id !== currentTodo.id,\n      ),\n    }));\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      active: filter,\n    });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        todo => !todo.completed,\n      ),\n    }));\n  }\n\n  showActiveTodosCount = () => {\n    const activeTodos = this.state.todos.filter(\n      todo => !todo.completed,\n    );\n    const activeTodosCount = activeTodos.length === 1\n      ? `1 item left`\n      : `${activeTodos.length} items left`;\n\n    return activeTodosCount;\n  }\n\n  showTodos = () => {\n    const {\n      todos,\n      active,\n    } = this.state;\n    let visibleTodos = [];\n\n    if (active === 'all') {\n      visibleTodos = todos;\n    } else if (active === 'active') {\n      visibleTodos = todos.filter(\n        todo => !todo.completed,\n      );\n    } else if (active === 'completed') {\n      visibleTodos = todos.filter(\n        todo => todo.completed,\n      );\n    }\n\n    return visibleTodos;\n  }\n\n  isActiveTodo = () => {\n    const activeTodos = this.state.todos.filter(\n      todo => !todo.completed,\n    );\n    const isActiveTodos = !activeTodos.length;\n\n    return isActiveTodos;\n  }\n\n  render() {\n    const {\n      active,\n      title,\n    } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <form onSubmit={this.handleAddTodo}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleInputTodoChange}\n            value={title}\n          />\n        </form>\n        <TodoList\n          todos={this.showTodos()}\n          onToggleComplete={this.onToggleComplete}\n          onDelete={this.deleteTodo}\n          toggleAllTodo={this.toggleAllTodo}\n          isActiveTodos={this.isActiveTodo()}\n        />\n        {this.state.todos.length > 0\n        && (\n          <Footer\n            showActiveTodosCount={this.showActiveTodosCount()}\n            setFilter={this.setFilter}\n            activeTodos={active}\n            handleClearCompleted={this.handleClearCompleted}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}