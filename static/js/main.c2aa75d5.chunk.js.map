{"version":3,"sources":["Form.js","TodoItem.js","TodoList.js","Button/Button.js","Footer.js","App.js","index.js"],"names":["Form","props","handleAddTodo","handleInputTodoChange","inputValue","onSubmit","className","name","placeholder","onChange","value","TodoItem","todo","onToggleComplete","onDelete","type","id","checked","completed","htmlFor","title","onClick","TodoList","todos","toggleAllTodo","isActiveTodos","length","key","map","classNames","Button","activeTodos","setFilter","status","active","Footer","handleClearCompleted","showActiveTodosCount","App","state","target","setState","event","preventDefault","prevState","trim","newTodo","uuid","deleteTodo","currentTodo","filter","showTodos","visibleTodos","isActiveTodo","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2aa75d5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Form = (props) => {\n  const {\n    handleAddTodo,\n    handleInputTodoChange,\n    inputValue,\n  } = props;\n\n  return (\n    <form onSubmit={handleAddTodo}>\n      <input\n        className=\"new-todo\"\n        name=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleInputTodoChange}\n        value={inputValue}\n      />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  handleAddTodo: PropTypes.func.isRequired,\n  handleInputTodoChange: PropTypes.func.isRequired,\n  inputValue: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = (props) => {\n  const {\n    todo,\n    onToggleComplete,\n    onDelete,\n  } = props;\n\n  return (\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        name=\"toggle\"\n        id={`todo-${todo.id}`}\n        checked={todo.completed}\n        onChange={() => onToggleComplete()}\n      />\n      <label htmlFor={`todo-${todo.id}`}>\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={onDelete}\n      />\n    </div>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n\n  onToggleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    onToggleComplete,\n    onDelete,\n    toggleAllTodo,\n    isActiveTodos,\n  } = props;\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n      </header>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          name=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={isActiveTodos}\n          onChange={toggleAllTodo}\n        />\n\n        { todos.length > 0 && (\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n          </label>\n        )}\n\n        <ul\n          className=\"todo-list\"\n          key={todos.id}\n        >\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames({\n                completed: todo.completed,\n              })}\n            >\n              <TodoItem\n                todo={todo}\n                onToggleComplete={\n                  () => onToggleComplete(todo.id)\n                }\n                onDelete={\n                  () => onDelete(todo)\n                }\n              />\n              <input\n                type=\"text\"\n                className=\"edit\"\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n\n  onToggleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  toggleAllTodo: PropTypes.func.isRequired,\n  isActiveTodos: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Button.css';\n\nexport const Button = (props) => {\n  const {\n    activeTodos,\n    setFilter,\n    status,\n    title,\n  } = props;\n\n  return (\n    <button\n      type=\"button\"\n      className={classNames('footer__button', {\n        active: activeTodos === status,\n      })}\n      onClick={() => setFilter(status)}\n    >\n      {title}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  activeTodos: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './Button/Button';\n\nexport const Footer = (props) => {\n  const {\n    setFilter,\n    activeTodos,\n    handleClearCompleted,\n    showActiveTodosCount,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {showActiveTodosCount}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <Button\n            setFilter={setFilter}\n            activeTodos={activeTodos}\n            status=\"all\"\n            title=\"All\"\n          />\n        </li>\n\n        <li>\n          <Button\n            setFilter={setFilter}\n            activeTodos={activeTodos}\n            status=\"active\"\n            title=\"Active\"\n          />\n        </li>\n\n        <li>\n          <Button\n            setFilter={setFilter}\n            activeTodos={activeTodos}\n            status=\"completed\"\n            title=\"Completed\"\n          />\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={handleClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  activeTodos: PropTypes.string.isRequired,\n  showActiveTodosCount: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport uuid from 'react-uuid';\nimport { Form } from './Form';\nimport { TodoList } from './TodoList';\nimport { Footer } from './Footer';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    active: 'all',\n    title: '',\n  }\n\n  handleInputTodoChange = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      title: value,\n    });\n  }\n\n  handleAddTodo = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n\n    this.setState((prevState) => {\n      if (!title.trim()) {\n        return {\n          title: '',\n        };\n      }\n\n      const newTodo = {\n        id: uuid(),\n        title,\n        completed: false,\n      };\n\n      return {\n        todos: [\n          ...prevState.todos,\n          newTodo,\n        ],\n        id: '',\n        title: '',\n      };\n    });\n  }\n\n  onToggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo,\n            completed: !todo.completed,\n          }\n          : todo)),\n    }));\n  }\n\n  toggleAllTodo = (event) => {\n    const { checked } = event.target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        {\n          ...todo,\n          completed: checked,\n        }\n      )),\n    }));\n  };\n\n  deleteTodo = (currentTodo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        todo => todo.id !== currentTodo.id,\n      ),\n    }));\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      active: filter,\n    });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        todo => !todo.completed,\n      ),\n    }));\n  }\n\n  showActiveTodosCount = () => {\n    const activeTodos = this.state.todos.filter(\n      todo => !todo.completed,\n    );\n    const activeTodosCount = activeTodos.length === 1\n      ? `1 item left`\n      : `${activeTodos.length} items left`;\n\n    return activeTodosCount;\n  }\n\n  showTodos = () => {\n    const {\n      todos,\n      active,\n    } = this.state;\n    let visibleTodos = [];\n\n    if (active === 'all') {\n      visibleTodos = todos;\n    } else if (active === 'active') {\n      visibleTodos = todos.filter(\n        todo => !todo.completed,\n      );\n    } else if (active === 'completed') {\n      visibleTodos = todos.filter(\n        todo => todo.completed,\n      );\n    }\n\n    return visibleTodos;\n  }\n\n  isActiveTodo = () => {\n    const activeTodos = this.state.todos.filter(\n      todo => !todo.completed,\n    );\n    const isActiveTodos = !activeTodos.length;\n\n    return isActiveTodos;\n  }\n\n  render() {\n    const {\n      active,\n      title,\n    } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Form\n          handleAddTodo={this.handleAddTodo}\n          handleInputTodoChange={this.handleInputTodoChange}\n          inputValue={title}\n        />\n        <TodoList\n          todos={this.showTodos()}\n          onToggleComplete={this.onToggleComplete}\n          onDelete={this.deleteTodo}\n          toggleAllTodo={this.toggleAllTodo}\n          isActiveTodos={this.isActiveTodo()}\n        />\n        {this.state.todos.length > 0\n        && (\n          <Footer\n            showActiveTodosCount={this.showActiveTodosCount()}\n            setFilter={this.setFilter}\n            activeTodos={active}\n            handleClearCompleted={this.handleClearCompleted}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}