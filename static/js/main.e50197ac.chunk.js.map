{"version":3,"sources":["TodoItem.js","TodoList.js","AddNewTodo.js","Footer/Footer.js","App.js","index.js"],"names":["TodoItem","props","todo","onToogleComplete","onDelete","className","type","id","onClick","htmlFor","title","TodoList","todos","toggleAllTodo","length","key","map","classNames","completed","AddNewTodo","state","value","handleInputTodoChange","target","setState","handleEnterKeyDown","event","newTodo","prevState","trim","uuid","onAdd","this","placeholder","onChange","onKeyDown","Component","Footer","setFilter","handleClearComplited","todosLeftCount","filter","todosLeftCountText","App","filtredTodos","addTodo","currentTodo","deleteTodo","visibleTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e50197ac.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = (props) => {\n  const {\n    todo,\n    onToogleComplete,\n    onDelete,\n  } = props;\n\n  return (\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={`todo-${todo.id}`}\n        onClick={onToogleComplete}\n      />\n      <label\n        htmlFor={`todo-${todo.id}`}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={onDelete}\n      />\n    </div>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n\n  onToogleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    onToogleComplete,\n    onDelete,\n    toggleAllTodo,\n  } = props;\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n      </header>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onClick={toggleAllTodo}\n        />\n        {\n          !todos.length\n                    || (\n                      <label htmlFor=\"toggle-all\">\n                        Mark all as complete\n                      </label>\n                    )\n        }\n\n        <ul\n          className=\"todo-list\"\n          key={todos.id}\n        >\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames({\n                completed: todo.completed,\n              })}\n            >\n              <TodoItem\n                todo={todo}\n                onToogleComplete={\n                  () => onToogleComplete(todo)\n                }\n                onDelete={\n                  () => onDelete(todo)\n                }\n              />\n              <input\n                type=\"text\"\n                className=\"edit\"\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n\n  onToogleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  toggleAllTodo: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport uuid from 'react-uuid';\nimport PropTypes from 'prop-types';\n\nexport class AddNewTodo extends Component {\n    state = {\n      value: '',\n    }\n\n    handleInputTodoChange = ({ target }) => {\n      const { value } = target;\n\n      this.setState({\n        value,\n      });\n    }\n\n    handleEnterKeyDown = (event) => {\n      const { value } = this.state;\n      let newTodo = {};\n\n      if (event.key === 'Enter') {\n        this.setState((prevState) => {\n          if (!prevState.value.trim()) {\n            return '';\n          }\n\n          newTodo = {\n            id: uuid(),\n            title: value,\n            completed: false,\n          };\n\n          this.props.onAdd(newTodo);\n\n          return {\n            id: '',\n            value: '',\n          };\n        });\n      }\n    }\n\n    render() {\n      const {\n        value,\n      } = this.state;\n\n      return (\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handleInputTodoChange}\n          onKeyDown={this.handleEnterKeyDown}\n          value={value}\n        />\n      );\n    }\n}\n\nAddNewTodo.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Footer.css';\n\nexport const Footer = (props) => {\n  const {\n    todos,\n    setFilter,\n    handleClearComplited,\n  } = props;\n\n  const todosLeftCount = todos.filter(todo => !todo.completed);\n  let todosLeftCountText = '';\n\n  if (todosLeftCount.length === 1) {\n    todosLeftCountText = `1 item left`;\n  } else {\n    todosLeftCountText = `${todosLeftCount.length} items left`;\n  }\n\n  return (\n    <footer\n      className=\"footer\"\n    >\n      <span\n        className=\"todo-count\"\n      >\n        { todosLeftCountText }\n      </span>\n\n      <ul\n        className=\"filters\"\n      >\n        <li>\n          <button\n            type=\"button\"\n            className=\"footer__button\"\n            onClick={() => setFilter('all')}\n          >\n                    All\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className=\"footer__button\"\n            onClick={() => setFilter('active')}\n          >\n                    Active\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className=\"footer__button\"\n            onClick={() => setFilter('completed')}\n          >\n                    Completed\n          </button>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={handleClearComplited}\n      >\n                Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n\n  setFilter: PropTypes.func.isRequired,\n  handleClearComplited: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { TodoList } from './TodoList';\nimport { AddNewTodo } from './AddNewTodo';\nimport { Footer } from './Footer/Footer';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    filtredTodos: 'all',\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        todo,\n      ],\n    }));\n  };\n\n  onToogleComplete = (currentTodo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === currentTodo.id\n          ? {\n            ...todo,\n            completed: !todo.completed,\n          }\n          : todo)),\n    }));\n  }\n\n  deleteTodo = (currentTodo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        todo => todo.id !== currentTodo.id,\n      ),\n    }));\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      filtredTodos: filter,\n    });\n  }\n\n  handleClearComplited = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        todo => !todo.completed,\n      ),\n    }));\n  }\n\n  toggleAllTodo = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        {\n          ...todo,\n          completed: !todo.completed,\n        }\n      )),\n    }));\n  }\n\n  render() {\n    const { todos, filtredTodos } = this.state;\n\n    let visibleTodo;\n\n    if (filtredTodos === 'all') {\n      visibleTodo = todos;\n    } else if (filtredTodos === 'active') {\n      visibleTodo = todos.filter(\n        todo => !todo.completed,\n      );\n    } else if (filtredTodos === 'completed') {\n      visibleTodo = todos.filter(\n        todo => todo.completed,\n      );\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <AddNewTodo\n          onAdd={this.addTodo}\n        />\n        <TodoList\n          todos={visibleTodo}\n          onToogleComplete={this.onToogleComplete}\n          onDelete={this.deleteTodo}\n          toggleAllTodo={this.toggleAllTodo}\n        />\n        {!this.state.todos.length\n        || (\n          <Footer\n            todos={visibleTodo}\n            setFilter={this.setFilter}\n            handleClearComplited={this.handleClearComplited}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}