{"version":3,"sources":["TodoItem.js","TodoList.js","Footer/Footer.js","App.js","index.js"],"names":["TodoItem","props","todo","onToogleComplete","onDelete","className","type","id","checked","completed","onChange","htmlFor","title","onClick","TodoList","todos","onToggleComplete","toggleAllTodo","filter","length","key","map","classNames","Footer","setFilter","active","handleClearCompleted","todosLeftCount","App","state","filtredTodos","handleInputTodoChange","value","target","setState","handleAddTodo","event","preventDefault","newTodo","prevState","trim","uuid","currentTodo","deleteTodo","visibleTodo","this","onSubmit","placeholder","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67103ea0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = (props) => {\n  const {\n    todo,\n    onToogleComplete,\n    onDelete,\n  } = props;\n\n  return (\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={`todo-${todo.id}`}\n        checked={todo.completed}\n        onChange={onToogleComplete}\n      />\n      <label\n        htmlFor={`todo-${todo.id}`}\n      >\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={onDelete}\n      />\n    </div>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  }).isRequired,\n\n  onToogleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = (props) => {\n  const {\n    todos,\n    onToggleComplete,\n    onDelete,\n    toggleAllTodo,\n  } = props;\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n      </header>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={todos.filter(todo => !todo.completed).length === 0}\n          onChange={toggleAllTodo}\n        />\n        {\n          todos.length > 0\n            && (\n              <label htmlFor=\"toggle-all\">\n                Mark all as complete\n              </label>\n            )\n        }\n\n        <ul\n          className=\"todo-list\"\n          key={todos.id}\n        >\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames({\n                completed: todo.completed,\n              })}\n            >\n              <TodoItem\n                todo={todo}\n                onToogleComplete={\n                  () => onToggleComplete(todo)\n                }\n                onDelete={\n                  () => onDelete(todo)\n                }\n              />\n              <input\n                type=\"text\"\n                className=\"edit\"\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n\n  onToggleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  toggleAllTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Footer.css';\n\nexport const Footer = (props) => {\n  const {\n    setFilter,\n    active,\n    handleClearCompleted,\n  } = props;\n\n  return (\n    <footer\n      className=\"footer\"\n    >\n      <span\n        className=\"todo-count\"\n      >\n        {props.todosLeftCount()}\n      </span>\n\n      <ul\n        className=\"filters\"\n      >\n        <li>\n          <button\n            type=\"button\"\n            className={classNames('footer__button', {\n              active: active === 'all',\n            })}\n            onClick={() => setFilter('all')}\n          >\n            All\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className={classNames('footer__button', {\n              active: active === 'active',\n            })}\n            onClick={() => setFilter('active')}\n          >\n            Active\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className={classNames('footer__button', {\n              active: active === 'completed',\n            })}\n            onClick={() => setFilter('completed')}\n          >\n            Completed\n          </button>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={handleClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  active: PropTypes.string.isRequired,\n  todosLeftCount: PropTypes.func.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport uuid from 'react-uuid';\nimport { TodoList } from './TodoList';\nimport { Footer } from './Footer/Footer';\n\nclass App extends Component {\n  state = {\n    todos: [],\n    filtredTodos: 'all',\n    active: 'all',\n    title: '',\n  }\n\n  handleInputTodoChange = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      title: value,\n    });\n  }\n\n  handleAddTodo = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n    let newTodo = {};\n\n    this.setState((prevState) => {\n      if (!title.trim()) {\n        return {\n          title: '',\n        };\n      }\n\n      newTodo = {\n        id: uuid(),\n        title,\n        completed: false,\n      };\n\n      return {\n        todos: [\n          ...prevState.todos,\n          newTodo,\n        ],\n        id: '',\n        title: '',\n      };\n    });\n  }\n\n  onToggleComplete = (currentTodo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === currentTodo.id\n          ? {\n            ...todo,\n            completed: !todo.completed,\n          }\n          : todo)),\n    }));\n  }\n\n  deleteTodo = (currentTodo) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        todo => todo.id !== currentTodo.id,\n      ),\n    }));\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      filtredTodos: filter,\n      active: filter,\n    });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(\n        todo => !todo.completed,\n      ),\n    }));\n  }\n\n  toggleAllTodo = (event) => {\n    const { checked } = event.target;\n\n    this.setState((prevState) => {\n      if (checked) {\n        return {\n          todos: prevState.todos.map(todo => (\n            {\n              ...todo,\n              completed: true,\n            }\n          )),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => (\n          {\n            ...todo,\n            completed: false,\n          }\n        )),\n      };\n    });\n  }\n\n  todosLeftCount = () => {\n    const todosLeftCount = this.state.todos.filter(\n      todo => !todo.completed,\n    );\n    let todosLeftCountText = '';\n\n    if (todosLeftCount.length === 1) {\n      todosLeftCountText = `1 item left`;\n    } else {\n      todosLeftCountText = `${todosLeftCount.length} items left`;\n    }\n\n    return todosLeftCountText;\n  }\n\n  render() {\n    const {\n      todos,\n      filtredTodos,\n      active,\n      title,\n    } = this.state;\n\n    let visibleTodo;\n\n    if (filtredTodos === 'all') {\n      visibleTodo = todos;\n    } else if (filtredTodos === 'active') {\n      visibleTodo = todos.filter(\n        todo => !todo.completed,\n      );\n    } else if (filtredTodos === 'completed') {\n      visibleTodo = todos.filter(\n        todo => todo.completed,\n      );\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <form onSubmit={this.handleAddTodo}>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={this.handleInputTodoChange}\n            value={title}\n          />\n        </form>\n        <TodoList\n          todos={visibleTodo}\n          onToggleComplete={this.onToggleComplete}\n          onDelete={this.deleteTodo}\n          toggleAllTodo={this.toggleAllTodo}\n        />\n        {this.state.todos.length > 0\n        && (\n          <Footer\n            todosLeftCount={this.todosLeftCount}\n            setFilter={this.setFilter}\n            active={active}\n            handleClearCompleted={this.handleClearCompleted}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}